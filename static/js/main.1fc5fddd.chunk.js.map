{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["getRandomNumber","min","max","toFixed","parseFloat","Math","random","fetchData","a","Promise","resolve","__dummyData","num","push","date","subDays","Date","toISOString","substr","value","AreaChartTooltip","active","payload","label","className","format","parseISO","AreaChartPage","useState","dummyData","setDummyData","refetchIndex","setRefetchIndex","loading","setLoading","generateDummyData","useEffect","ResponsiveContainer","width","height","AreaChart","data","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","type","dot","dataKey","stroke","fill","XAxis","axisLine","tickLine","tickFormatter","str","getDate","color","fillOpacity","YAxis","tickCount","number","Tooltip","content","onClick","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fc5fddd.chunk.js","sourcesContent":["import { ResponsiveContainer, AreaChart, XAxis, YAxis, Area, Tooltip } from \"recharts\"\nimport { format, parseISO, subDays } from \"date-fns\"\nimport { FC, useEffect, useState } from \"react\"\nimport { Payload } from \"recharts/types/component/DefaultTooltipContent\"\n\nimport \"./App.css\"\n\ninterface Data {\n    date: string\n    value: number\n}\n\nconst getRandomNumber = (min: number, max: number, toFixed = 3): number =>\n    parseFloat((Math.random() * (max - min)).toFixed(toFixed))\n\nconst fetchData = async (): Promise<Data[]> => {\n    return new Promise(resolve => {\n        const __dummyData: Data[] = []\n        for (let num = 30; num >= 0; num--) {\n            __dummyData.push({\n                date: subDays(new Date(), num).toISOString().substr(0, 10),\n                value: getRandomNumber(5, 10000),\n            })\n        }\n\n        resolve(__dummyData)\n    })\n}\n\nconst AreaChartPage: FC<{}> = () => {\n    const [dummyData, setDummyData] = useState<Data[]>([])\n    const [refetchIndex, setRefetchIndex] = useState<number>(0)\n    const [loading, setLoading] = useState<boolean>(true)\n\n    const generateDummyData = async () => {\n        setLoading(true)\n        setDummyData(await fetchData())\n        setLoading(false)\n    }\n\n    useEffect(() => {\n        generateDummyData()\n    }, [refetchIndex])\n\n    if (loading) return <></>\n\n    return (\n        <>\n            <ResponsiveContainer width=\"100%\" height={400}>\n                <AreaChart data={dummyData}>\n                    <defs>\n                        <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"25%\" stopColor=\"#2451B7\" stopOpacity={0.4} />\n                            <stop offset=\"95%\" stopColor=\"#2451B7\" stopOpacity={0.05} />\n                        </linearGradient>\n                    </defs>\n\n                    <Area type=\"monotone\" dot={true} dataKey=\"value\" stroke=\"#2451B7\" fill=\"url(#color)\" />\n\n                    <XAxis\n                        dataKey=\"date\"\n                        axisLine={true}\n                        tickLine={true}\n                        tickFormatter={str => {\n                            const date = parseISO(str)\n                            if (date.getDate() % 2 === 0) return format(date, \"MMM, d\")\n\n                            return \"\"\n                        }}\n                        fill=\"white\"\n                        color=\"white\"\n                        fillOpacity={100}\n                    />\n\n                    <YAxis\n                        dataKey=\"value\"\n                        axisLine={true}\n                        tickLine={true}\n                        tickCount={8}\n                        tickFormatter={number => `$${number.toFixed(2)}`}\n                    />\n\n                    <Tooltip\n                        content={({ active, payload, label }) => (\n                            <AreaChartTooltip active={active} payload={payload} label={label} />\n                        )}\n                    />\n                </AreaChart>\n            </ResponsiveContainer>\n            <div className=\"roll-dice-container\">\n                <button onClick={() => setRefetchIndex(prevState => prevState + 1)}>ðŸŽ² Roll Dice</button>\n            </div>\n        </>\n    )\n}\n\ninterface AreaChartTooltipProps {\n    active?: boolean\n    payload?: Payload<any, any>[]\n    label?: string\n}\n\nconst AreaChartTooltip: FC<AreaChartTooltipProps> = ({ active, payload, label }) => {\n    if (active) {\n        return (\n            <div className=\"tooltip\">\n                <h4>{label && format(parseISO(label || \"\"), \"eeee, d MMM, yyyy\")}</h4>\n                <p>{payload?.[0]?.value?.toFixed?.(2)} BHD</p>\n            </div>\n        )\n    }\n\n    return null\n}\n\nexport default AreaChartPage\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}